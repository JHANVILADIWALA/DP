/////////////////0-1 KNAPSACK
https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

int knapSack(int w, int wt[], int val[], int n) 
    { 
       int t[n+1][w+1];
        memset(t,-1,sizeof(t));
        //base case
       if(n==0||w==0){
           return 0;
       }
       //memoization
       if(t[n][w]!=-1) return t[n][w];
       
               if(wt[n-1]<=w){
                  return t[n][w]= max(  val[n-1]+knapSack(w-wt[n-1] ,wt,val,n-1 ) , knapSack(w ,wt,val,n-1 ));
               }
               else{
                  return t[n][w]= knapSack(w ,wt,val,n-1 );
               }
    }


///////////////SUBSET SUM
bool isSubsetSum(int arr[], int m,int n){
        //int n=arr.size();
        bool t[n+1][m+1];
        //table
        for(int i=0;i<n+1;i++){
            for(int j=0 ; j<m+1 ; j++ ){
                if(i==0) t[i][j]=false;
                if(j==0) t[i][j]=true;
            }
        }
        for(int i=1;i<n+1;i++){
            for(int j=1 ; j<m+1 ; j++ ){
                if(arr[i-1]<=j){
                    t[i][j]= ( t[i-1][j-arr[i-1]] ) || (t[i-1][j] );
                    //return max of uthaya and non uthaya
                    //uthaya: sum bhi dec and move to left
                    //ni uthaya: only move to left, no dec in sum
                }
                else{
                    t[i][j]=t[i-1][j];//not including
                }
            }
        }
          return t[n][m];
          }
          
///////////////EQUAL SUM PARTITION          
    int equalPartition(int n, int arr[])
    {
        int sum=0;
        for(int i=0;i<n;i++) sum+=arr[i];
        if(sum%2==1)//odd
        return 0;
        else//even
        {
        bool k= isSubsetSum(arr, sum/2 ,n);
        if(k==true) return 1;
        else return 0;   
        }
    }
