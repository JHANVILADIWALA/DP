
 /*     RECURSIVE SOLUTION
        if(n==0 || m==0)return 0;
         
         if(s1[n-1]==s2[m-1]){
             return 1+lcs(n-1, m-1, s1, s2);
         }
         else{
             return max( lcs(n-1,m,s1,s2) , lcs(n,m-1,s1,s2) );
         } */

/* memoisation
int t[1001][1001];
    
    int fn(int n, int m, string s1, string s2 ){
        
        if(n==0 || m==0)return 0;
         
         if(t[n][m]!=-1)return t[n][m];
         
         if(s1[n-1]==s2[m-1]){
             return t[n][m]=1+fn(n-1, m-1, s1, s2);
         }
         else{
             return t[n][m]=max( fn(n-1,m,s1,s2) , fn(n,m-1,s1,s2) );
         } 
         
    }
    int lcs(int n, int m, string s1, string s2)
    {
         memset(t,-1,sizeof(t));
         return fn(n,m,s1,s2);
    } */

/* 
BOTTOM UP APPROACH
int lcs(int n, int m, string s1, string s2)
    {    int t[n+1][m+1];
          for(int i=0 ; i<=n; i++){
              for(int j=0;j<=m; j++){
                  if(i==0 || j==0)t[i][j]=0;
              }
          }
          
          for(int i=1; i<=n ; i++){
              for(int j=1; j<=m; j++){
                  if(s1[i-1]==s2[j-1]) t[i][j]=1+t[i-1][j-1];
                  else{
                      t[i][j]=max( t[i-1][j] , t[i][j-1] );
                  }
              }
          }
          return t[n][m];
    } */
